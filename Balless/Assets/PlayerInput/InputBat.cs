//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/PlayerInput/InputBat.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputBat: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputBat()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputBat"",
    ""maps"": [
        {
            ""name"": ""Platforma"",
            ""id"": ""098d7492-aaa5-4fb1-adf8-6d8a4e65cf2e"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""3c78a6fb-5f6a-4aad-8598-7455b3dd5490"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""43490dab-d7db-4d15-a4c6-20d3dac125e1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""90260602-3a49-4d3d-a32d-9b814616be74"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c25be49f-62c0-4436-96da-77594048f9df"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2af5874b-b7aa-4927-9af2-41b592149348"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2ef3b662-41dc-4617-9c0f-b5df95478141"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""ba5b599f-e4d2-4d54-8991-dffb167afae2"",
            ""actions"": [
                {
                    ""name"": ""UIisActive"",
                    ""type"": ""Button"",
                    ""id"": ""3dc5436f-0518-4054-bd04-441e32c7017a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c7a6e8cb-5dc6-49ac-8fdd-9ff741e58d1e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UIisActive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Platforma
        m_Platforma = asset.FindActionMap("Platforma", throwIfNotFound: true);
        m_Platforma_Rotate = m_Platforma.FindAction("Rotate", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_UIisActive = m_UI.FindAction("UIisActive", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Platforma
    private readonly InputActionMap m_Platforma;
    private List<IPlatformaActions> m_PlatformaActionsCallbackInterfaces = new List<IPlatformaActions>();
    private readonly InputAction m_Platforma_Rotate;
    public struct PlatformaActions
    {
        private @InputBat m_Wrapper;
        public PlatformaActions(@InputBat wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_Platforma_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Platforma; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlatformaActions set) { return set.Get(); }
        public void AddCallbacks(IPlatformaActions instance)
        {
            if (instance == null || m_Wrapper.m_PlatformaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlatformaActionsCallbackInterfaces.Add(instance);
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
        }

        private void UnregisterCallbacks(IPlatformaActions instance)
        {
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
        }

        public void RemoveCallbacks(IPlatformaActions instance)
        {
            if (m_Wrapper.m_PlatformaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlatformaActions instance)
        {
            foreach (var item in m_Wrapper.m_PlatformaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlatformaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlatformaActions @Platforma => new PlatformaActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_UIisActive;
    public struct UIActions
    {
        private @InputBat m_Wrapper;
        public UIActions(@InputBat wrapper) { m_Wrapper = wrapper; }
        public InputAction @UIisActive => m_Wrapper.m_UI_UIisActive;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @UIisActive.started += instance.OnUIisActive;
            @UIisActive.performed += instance.OnUIisActive;
            @UIisActive.canceled += instance.OnUIisActive;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @UIisActive.started -= instance.OnUIisActive;
            @UIisActive.performed -= instance.OnUIisActive;
            @UIisActive.canceled -= instance.OnUIisActive;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlatformaActions
    {
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnUIisActive(InputAction.CallbackContext context);
    }
}
